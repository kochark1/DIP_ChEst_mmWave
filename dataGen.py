# -*- coding: utf-8 -*-
"""
Created on Fri Aug 21 17:29:46 2020

@author: kochark1
This module is responsible of simulation both Tx and channel model of a
communication system for a pre set range of SNR values.
"""
import threading
import numpy as np
import os


from shared_params import Simulation_parameters, System_parameters,\
    Channel_parameters
from systemSimulator import SystemModel
class DataGen:
    """
    The datageneration part is done sample-wise. Each DataGen object
    is responsible in generating a single sample corresponding to each
    SNR value in the list System_parameters.snr_dB
    """
    @classmethod
    def setup_snr_folders(cls):
        # Setting up some system parameters like pilot sequence and creating results
        # subfolders
        System_parameters.set_class_config()
        SystemModel.set_config(System_parameters, Channel_parameters)
        
    def __init__(self, sample_id):
        """
        

        Parameters
        ----------
        sample_id : int
            Each object generates a data sample for all SNR values. This
            parameter identifies the sample number in the list of samples
            generated by this method.

        Returns
        -------
        None.

        """
        self.sample_id = sample_id
        
        # Generate and save a sample per each SNR.
        threads = []
        snr_id = 0
        for snr_folder in System_parameters.snr_folder_list:
            filePath = os.path.join(Simulation_parameters.results_folder_path,
                                    snr_folder)
            # If enabled, concurrently generate the samples.
            if Simulation_parameters.threadingEnabled:
                t = threading.Thread(target=self.snr_branch_generate,
                                     args=[filePath, snr_id])
                t.start()
                threads = threads + [t,]
            else:
                self.snr_branch_generate(filePath, snr_id)
            snr_id +=1
        
        # Wait till all the SNR samples are generated
        if Simulation_parameters.threadingEnabled:
            for thread in threads:
                thread.join()
    
    def snr_branch_generate(self, filePath, snr_id):
        """
        Computes a sample for given SNR input

        Parameters
        ----------
        filePath : str
            Represents full path of the target location wher the sample is
            expected to be saved.
            
        snr_id : int
            Represents SNR index in the snr_lin list

        Returns
        -------
        None.

        """
        # SystemModel is the class defined to handle the data generation (RX
        # data).
        systemModel = SystemModel(snr_id)
        [y_matrix, h_matrix_org] = systemModel.generate()
        
        # Save the RX data and original channel matrix.
        np.save(os.path.join(filePath, f'Y_sample{self.sample_id}'), y_matrix)
        np.save(os.path.join(filePath, f'H_sample{self.sample_id}'),
                h_matrix_org)